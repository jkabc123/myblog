{
  
    
        "post0": {
            "title": "Magic of yield",
            "content": "Introduction . yield syntax was first introduced to Python in PEP 255. It was introduced to faciliate the concept of generator. In short, generator provides a kind of function which returns an immediate value to the caller, then it stops and its state is maintained so that it can be resumed later. . Then enhanced generator was proposed in PEP 342. It mainly introduced generator expression and send method. . Later on in PEP 380, syntax yield from was proposed to allow a generator to delegate parts of its operation to another generator. . These yield syntaxes and the programming techniques around them are so unqiue in Python, they become one of the trademarks magics Python produces and still facinate programmers till today. A better understanding of these techniques will not only make our code more clean and but also easy to understand and more efficient. . Example of yield . Now we have a look at a simple example to define a function countdown which counts down from the number max and produces the value. . def countdown(max): n=0 while n&lt;max: print(&quot;Before yield&quot;, n) yield n n+=1 print(&quot;After yield&quot;,n) . countdown(3) . &lt;generator object countdown at 0x0000021F5B214148&gt; . gen=_ . next(gen) . Before yield 0 . 0 . next(gen) . After yield 1 Before yield 1 . 1 . next(gen) . After yield 2 Before yield 2 . 2 . next(gen) . After yield 3 . StopIteration Traceback (most recent call last) &lt;ipython-input-17-6e72e47198db&gt; in &lt;module&gt; -&gt; 1 next(gen) StopIteration: . From the code above you can tell, once you have a yield statement inside countdown function, it becomes a function returns generator object. . You can call next on gen. It will run to yield and then stops there. . When you call next on gen again, it continues to run from the previous state to the next yield. . You continue to call next on gen a few times until it exits the loop. Because now it can&#39;t reach the yield statement, it produces a StopIteration Exception. . How things work . import dis . dis.dis(countdown) . 2 0 LOAD_CONST 1 (0) 2 STORE_FAST 1 (n) 3 4 SETUP_LOOP 46 (to 52) &gt;&gt; 6 LOAD_FAST 1 (n) 8 LOAD_FAST 0 (max) 10 COMPARE_OP 0 (&lt;) 12 POP_JUMP_IF_FALSE 50 4 14 LOAD_GLOBAL 0 (print) 16 LOAD_CONST 2 (&#39;Before yield&#39;) 18 LOAD_FAST 1 (n) 20 CALL_FUNCTION 2 22 POP_TOP 5 24 LOAD_FAST 1 (n) 26 YIELD_VALUE 28 POP_TOP 6 30 LOAD_FAST 1 (n) 32 LOAD_CONST 3 (1) 34 INPLACE_ADD 36 STORE_FAST 1 (n) 7 38 LOAD_GLOBAL 0 (print) 40 LOAD_CONST 4 (&#39;After yield&#39;) 42 LOAD_FAST 1 (n) 44 CALL_FUNCTION 2 46 POP_TOP 48 JUMP_ABSOLUTE 6 &gt;&gt; 50 POP_BLOCK &gt;&gt; 52 LOAD_CONST 0 (None) 54 RETURN_VALUE . dir(gen) . [&#39;__class__&#39;, &#39;__del__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__name__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__next__&#39;, &#39;__qualname__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;close&#39;, &#39;gi_code&#39;, &#39;gi_frame&#39;, &#39;gi_running&#39;, &#39;gi_yieldfrom&#39;, &#39;send&#39;, &#39;throw&#39;] . gen.gi_code, gen.gi_running . (&lt;code object countdown at 0x0000021F5B289A50, file &#34;&lt;ipython-input-11-a50b7c6d6d32&gt;&#34;, line 1&gt;, False) . More about yield .",
            "url": "https://jkabc123.github.io/myblog/yield/generator/concurrent/2020/06/27/Magic-of-yield.html",
            "relUrl": "/yield/generator/concurrent/2020/06/27/Magic-of-yield.html",
            "date": " • Jun 27, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "About . Peter Yang earned a Ph.D in Computer Cryptology a decade ago. Peter has been in IT industry for more than 15 years. His early career focused on designing threshold encryption algorithms and teaching Computer Cryptology in university. Since 2015, he is mainly focused on Python and its ecosystem. . Contact . Peter can be contacted by sending email to pyoung1683@gmail.com . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jkabc123.github.io/myblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}